name: tests-and-coverage

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write           # pour committer le badge sur main
  pull-requests: write      # pour commenter les PR

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  COV_MIN: "85"             # seuil de couverture minimum (échec si en dessous)

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # Si tu utilises uv (recommandé vu ton repo)
      - name: Install uv & dependencies
        run: |
          pip install -U pip
          pip install uv
          pip install coverage pytest "genbadge[coverage]"

      - name: Sync env from lockfile
        run: uv sync --frozen

      # Exécution des tests AVEC coverage, sans pytest-cov
      - name: Run tests with coverage
        run: |
          python -m coverage run -m pytest -q
          python -m coverage report
          python -m coverage xml -o coverage.xml
          python -m coverage html -d htmlcov

      # Génère un badge SVG à partir du coverage.xml (local, pas de tiers)
      - name: Install genbadge
        run: pip install "genbadge[coverage]"

      - name: Generate coverage badge
        run: |
          genbadge coverage -i coverage.xml -o coverage.svg

      # Échoue si la couverture passe sous le seuil COV_MIN
        # (parse coverage.xml -> line-rate * 100)
      - name: Enforce coverage threshold
        id: covcheck
        run: |
          python - <<'PY'
          import sys, xml.etree.ElementTree as ET, os
          rate = float(ET.parse('coverage.xml').getroot().get('line-rate', 0.0)) * 100
          min_rate = float(os.environ.get("COV_MIN","0"))
          print(f"Coverage: {rate:.2f}% (min {min_rate:.2f}%)")
          # Expose pour étapes suivantes
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"pct={rate:.2f}\n")
          if rate < min_rate:
              sys.exit(1)
          PY

      # Commente la PR avec le % de couverture (sticky comment)
      - name: Comment PR with coverage
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const pct = core.getInput('pct', { required: false }) || '${{ steps.covcheck.outputs.pct }}';
            const body = `**Coverage:** ${pct}%  \n(Generated by CI from \`coverage.xml\`)`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const marker = '<!-- coverage-sticky -->';
            const previous = comments.find(c => c.body && c.body.includes(marker));
            if (previous) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previous.id,
                body: `${marker}\n${body}`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${marker}\n${body}`
              });
            }

      # Commit/Push du badge uniquement sur la branche main
      - name: Commit coverage badge
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add coverage.svg
          git commit -m "ci: update coverage badge" || echo "No badge changes"
          git push

      # Conserve les rapports comme artefacts du run
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
          if-no-files-found: warn
